swagger: "2.0"
info:
  description: "This is a simple project to learn Spring Framework at Halyk Academy"
  version: "1.0.0"
  title: "Swagger Bookstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "ar.amirgaliev.2015@gmail.com"
    # license:
    # name: "Apache 2.0"
    # url: "http://www.apache.org/licenses/LICENSE-2.0.html"
# host: "petstore.swagger.io"
# basePath: "/v2"
tags:
  - name: "book"
    description: "Everything about your books"
      # externalDocs:
    # description: "Find out more"
    # url: "http://swagger.io"
  - name: "store"
    description: "Access to Petstore orders"
  - name: "user"
    description: "Operations about user"
    externalDocs:
      description: "Find out more about our store"
      url: "http://swagger.io"
schemes:
  - "https"
  - "http"
paths:
  /book:
    post:
      tags:
        - "book"
      summary: "Add a new book to the bookstore"
      description: ""
      operationId: "addBook"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Book object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Book"
      responses:
        "201":
          description: "Successfully created!"
        "405":
          description: "Invalid input"
        "500":
          description: "Server error"

    get:
      tags:
        - "book"
      summary: "Get all books"
      description: ""
      operationId: "getAllBooks"
      produces:
        - "application/json"
      responses:
        "200":
          description: "A list of books"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Books not found"

  /book/{bookId}:
    get:
      tags:
        - "book"
      summary: "Find book by ID"
      description: ""
      operationId: "getBookById"
      produces:
        - "application/json"
      parameters:
        - name: "bookId"
          in: "path"
          description: "Book ID for finding data by ID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Book"
        "404":
          description: "Book not found"

    put:
      tags:
        - "book"
      summary: "Update an existing book"
      description: ""
      operationId: "updateBook"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "bookId"
          description: "Book object that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Book"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Book not found"
        "405":
          description: "Validation exception"

    delete:
      tags:
        - "book"
      summary: "Delete book by ID"
      description: ""
      operationId: "deleteBookById"
      produces:
        - "application/json"
      parameters:
        - name: "bookId"
          in: "path"
          description: "Book id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Book successfully deleted"
        "404":
          description: "Book not found"

  /author:
    post:
      tags:
        - "author"
      summary: "Add a new author to the bookstore"
      description: ""
      operationId: "addAuthor"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Author object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Author"
      responses:
        "201":
          description: "Successfully created!"
        "405":
          description: "Invalid input"

    get:
      tags:
        - "author"
      summary: "Get all authors"
      description: ""
      operationId: "getAllAuthors"
      produces:
        - "application/json"
      responses:
        "200":
          description: "A list of authors"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Books not found"

  /author/{authorId}:
    get:
      tags:
        - "author"
      summary: "Find author by ID"
      description: ""
      operationId: "getAuthorById"
      produces:
        - "application/json"
      parameters:
        - name: "authorId"
          in: "path"
          description: "Author ID for finding data by ID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Author"
        "404":
          description: "Author not found"

    put:
      tags:
        - "author"
      summary: "Update an existing author"
      description: ""
      operationId: "updateAuthor"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "authorId"
          description: "Author object that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Author object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Author"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Author not found"
        "405":
          description: "Validation exception"

    delete:
      tags:
        - "author"
      summary: "Delete author by ID"
      description: ""
      operationId: "deleteAuthorById"
      produces:
        - "application/json"
      parameters:
        - name: "authorId"
          in: "path"
          description: "Author id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Author successfully deleted"
        "404":
          description: "Author not found"

  /publisher:
    post:
      tags:
        - "publisher"
      summary: "Add a new publisher to the bookstore"
      description: ""
      operationId: "addPublisher"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Publisher object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Publisher"
      responses:
        "201":
          description: "Successfully created!"
        "405":
          description: "Invalid input"

    get:
      tags:
        - "publisher"
      summary: "Get all publishers"
      description: ""
      operationId: "getAllPublishers"
      produces:
        - "application/json"
      responses:
        "200":
          description: "A list of publishers"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Publisher"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Publishers not found"

  /publisher/{publisherId}:
    get:
      tags:
        - "publisher"
      summary: "Find publisher by ID"
      description: ""
      operationId: "getPublisherById"
      produces:
        - "application/json"
      parameters:
        - name: "publisherId"
          in: "path"
          description: "Publisher ID for finding data by ID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Publisher"
        "404":
          description: "Publisher not found"

    put:
      tags:
        - "publisher"
      summary: "Update an existing publisher"
      description: ""
      operationId: "updatePublisher"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "publisherId"
          description: "Publisher object that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Publisher object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Publisher"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Publisher not found"
        "405":
          description: "Validation exception"

    delete:
      tags:
        - "publisher"
      summary: "Delete publisher by ID"
      description: ""
      operationId: "deletePublisherById"
      produces:
        - "application/json"
      parameters:
        - name: "publisherId"
          in: "path"
          description: "Publisher id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Publisher successfully deleted"
        "404":
          description: "Publisher not found"

definitions:
  Book:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      price:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      numberOfPages:
        type: "integer"
        format: "int32"
      releaseYear:
        type: "string"
        format: "date"
      publisher:
        $ref: "#/definitions/Publisher"
      authors:
        type: "array"
        xml:
          name: "author"
          wrapped: true
        items:
          $ref: "#/definitions/Author"
    xml:
      name: "Book"

  Publisher:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      publishedBooks:
        type: "array"
        xml:
          name: "publishedBook"
          wrapped: true
        items:
          $ref: "#/definitions/Book"
    xml:
      name: "Publisher"

  Author:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      surname:
        type: "string"
      name:
        type: "string"
      patronymic:
        type: "string"
      dateOfBirth:
        type: "string"
        format: "date"
      writtenBooks:
        type: "array"
        xml:
          name: "writtenBook"
          wrapped: true
        items:
          $ref: "#/definitions/Book"
    xml:
      name: "Author"